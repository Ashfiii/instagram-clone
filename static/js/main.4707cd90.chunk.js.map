{"version":3,"sources":["image/Instagram_logo.png","firebase.js","components/Post/Post.js","components/ImageUpload/ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","Post","username","user","postId","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","event","target","disabled","onClick","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","image","setImage","progress","setProgress","max","files","console","log","name","ref","put","on","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","openSignUp","setOpenSignUp","setUsername","email","setEmail","password","setPassword","setUser","openSignIn","setOpenSignIn","onAuthStateChanged","authUser","id","post","Modal","open","onClose","style","img","height","Input","Button","createUserWithEmailAndPassword","updateProfile","catch","err","signInWithEmailAndPassword","signOut","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4707cd90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Instagram_logo.dcc389e5.png\";","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n        apiKey: \"AIzaSyCCtwB37BS9o0QHNbjuR3mT6FJh4g59xS4\",\r\n        authDomain: \"instagram-clone-d4e15.firebaseapp.com\",\r\n        databaseURL: \"https://instagram-clone-d4e15.firebaseio.com\",\r\n        projectId: \"instagram-clone-d4e15\",\r\n        storageBucket: \"instagram-clone-d4e15.appspot.com\",\r\n        messagingSenderId: \"834670917747\",\r\n        appId: \"1:834670917747:web:5b54880d36f01a2ea81206\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport {db,auth,storage}; ","import React, {useState, useEffect} from 'react';\r\nimport { Avatar } from '@material-ui/core';\r\nimport './Post.css';\r\nimport { db } from '../../firebase';\r\nimport firebase from 'firebase';\r\n\r\nfunction Post({username,user, postId, caption, imageUrl}) {\r\n\r\n    const [comments, setComments] = useState([])\r\n    const [comment, setComment] = useState('');\r\n\r\n    useEffect(()=>{\r\n        const unsubscribe = db.collection('posts').doc(postId).collection('comments')\r\n        .orderBy('timestamp', 'desc')\r\n        .onSnapshot(snapshot=>{\r\n            setComments(snapshot.docs.map(doc=> doc.data()))\r\n            })\r\n        return ()=>{\r\n            unsubscribe();\r\n          }\r\n    },[postId])\r\n\r\n    const addComment = (event)=>{\r\n        event.preventDefault();\r\n        db.collection('posts').doc(postId).collection('comments').add({\r\n            text: comment,\r\n            username: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n        setComment('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__header\">\r\n                <Avatar alt=\"Ashfaque\" \r\n                src=\"/broken-image.jpg\" \r\n                className=\"post__avatar\" />\r\n                <h3 className=\"post__username\">{username}</h3>\r\n            </div>\r\n            <img src={imageUrl} className=\"post__image\" alt=\"post\"/>\r\n            <h4 className=\"post__text\"><strong>{username}</strong> {caption}</h4>\r\n            <div className=\"post__comment\">\r\n                {comments.map( comment=>(\r\n                    <p>{comment.username}: {comment.text}</p>\r\n                ))}\r\n            </div>\r\n            {user ? <form className=\"post__commentBox\">\r\n                <input className=\"post__Input\" type=\"text\" placeholder=\"Write a comment...\" value={comment} onChange={event=>{setComment(event.target.value)}} />\r\n                <button className=\"post__Button\" type=\"submit\" disabled={!comment} onClick={addComment}>Post</button>\r\n            </form>: ''}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, {useState} from 'react';\r\nimport {db, storage} from '../../firebase';\r\nimport firebase from 'firebase';\r\nimport './ImageUpload.css';\r\n\r\nfunction ImageUpload({username}) {\r\n\r\n    const [caption, setCaption] = useState('')\r\n    const [image, setImage] = useState(null)\r\n    const [progress, setProgress] = useState('');\r\n\r\n    const handleChange = (event)=>{\r\n        if(event.target.files[0]){\r\n            setImage(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    const handleUpload = ()=>{\r\n        console.log(image.name);\r\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) =>{\r\n                const progress = Math.round((snapshot.bytesTransferred/snapshot.totalBytes) *100);\r\n                setProgress(progress)\r\n            },\r\n            (error) =>{\r\n                console.log(error);\r\n                alert(error.message);\r\n            },\r\n            ()=>{\r\n                storage\r\n                .ref('images')\r\n                .child(image.name)\r\n                .getDownloadURL()\r\n                .then(url=>{\r\n                    db.collection(\"posts\").add({\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        caption: caption,\r\n                        imageUrl: url,\r\n                        username: username\r\n                    })\r\n                   setProgress(0);\r\n                   setCaption('');\r\n                   setImage(null);\r\n                })\r\n            }\r\n            \r\n        )\r\n    }\r\n    return (\r\n        <div className=\"imageUpload\">\r\n            <progress className=\"imageUpload__progress\" value={progress} max=\"100\"/>\r\n            <input className=\"imageUpload__textInput\" type=\"text\" placeholder=\"Write a caption...\" value={caption} onChange={event=>{setCaption(event.target.value)}}/>\r\n            <input className=\"imageUpload__file\" type=\"file\" onChange={handleChange}/>\r\n            <button className=\"imageUpload__button\" onClick={handleUpload}>Upload</button> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport img from './image/Instagram_logo.png';\nimport Post from './components/Post/Post';\nimport {db, auth} from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport ImageUpload from './components/ImageUpload/ImageUpload';\n// import InstagramEmbed from 'react-instagram-embed';\n\n// const url='https://www.instagram.com/p/CEl4u9UgWlV/';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 250,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes= useStyles();\n  \n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([])\n  const [openSignUp, setOpenSignUp] = useState(false)\n  const [username, setUsername] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [openSignIn, setOpenSignIn] = useState(false)\n\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged(authUser =>{\n      if(authUser){\n        console.log(authUser);\n        setUser(authUser);\n      }else{\n        setUser(null)\n      }\n    })\n    return ()=>{\n      unsubscribe();\n    }\n  },[user, username])\n\n  useEffect(()=>{\n    db.collection('posts')\n    .orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot =>{\n      setPosts(snapshot.docs.map(doc => ({id: doc.id, post:doc.data()})))\n    })\n  },[])\n\n  const handleSignUp =(event)=>{\n    event.preventDefault();\n    auth.createUserWithEmailAndPassword(email, password)\n    .then((authUser)=>{\n      return authUser.user.updateProfile({\n        displayName: username\n      })\n    })\n    .catch(err => alert(err.message));\n    setOpenSignUp(false)\n    setUsername('');\n    setEmail('');\n    setPassword('');\n  }\n\n  const handleSignIn =(event)=>{\n    event.preventDefault();\n    auth.signInWithEmailAndPassword(email, password)\n    .catch(err => alert(err.message));\n    setOpenSignIn(false)\n    setUsername('');\n    setEmail('');\n    setPassword('');\n  }\n\n  return (\n    <div className=\"App\">\n      <Modal className=\"app__modal\" open={openSignUp} onClose={()=>setOpenSignUp(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__form\">\n              <img src={img} className=\"app__headerImage\" alt=\"\"  width=\"150\" height=\"50\"/>\n            <Input className=\"modal__input\" type=\"text\" placeholder=\"username\" value={username} onChange={(event)=>setUsername(event.target.value)}/>\n            <Input className=\"modal__input\" type=\"text\" placeholder=\"email\" value={email} onChange={(event)=>setEmail(event.target.value)}/>\n            <Input className=\"modal__input\" type=\"text\" placeholder=\"password\" value={password} onChange={(event)=>setPassword(event.target.value)}/>\n            <Button type=\"submit\" onClick={handleSignUp}>Sign Up</Button>\n          </form>\n        </div>\n      </Modal>\n      <Modal className=\"app__modal\" open={openSignIn} onClose={()=>setOpenSignIn(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__form\">\n            <center>\n              <img src={img} className=\"app__headerImage\" alt=\"\"  width=\"150\" height=\"50\"/>\n            </center>\n            <Input className=\"modal__input\" type=\"text\" placeholder=\"email\" value={email} onChange={(event)=>setEmail(event.target.value)}/>\n            <Input className=\"modal__input\" type=\"text\" placeholder=\"password\" value={password} onChange={(event)=>setPassword(event.target.value)}/>\n            <Button type=\"submit\" onClick={handleSignIn}>Sign In</Button>\n          </form>\n        </div>\n      </Modal>\n      \n      <div className=\"app__header\">\n        <img className=\"app_headerImage\" src ={img} alt=\"instagram-logo\" width=\"120\" height=\"40\"/>\n        {user ? (<Button className=\"app__logout\" onClick={()=>auth.signOut()}>Logout</Button>): \n        (<div className=\"app__logInContainer\">\n        <Button className=\"app__signUp\" onClick={()=>setOpenSignUp(true)}>Sign Up</Button>\n        <Button className=\"app__signIn\" onClick={()=>setOpenSignIn(true)}>Sign In</Button>\n        </div>\n      )}\n      </div>\n      {user ? \n      <ImageUpload className=\"app__imageUpload\" username={user.displayName}/> : <div><p>Sign In to upload post</p></div>}\n      <div className=\"app__posts\">\n        <div className=\"app__postLeft\">\n          {posts.map(({id, post}) =>(\n            <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl}/>\n          ))}\n        </div>\n        {/* <div className=\"app__postRight\">\n          <InstagramEmbed\n            url={url}\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName='div'\n            protocol=''\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}